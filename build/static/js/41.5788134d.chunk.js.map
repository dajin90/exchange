{"version":3,"sources":["views/projects/ReportListView/Header.js","views/projects/ReportListView/Results.js","views/projects/ReportListView/index.js"],"names":["useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","as","SvgIcon","queryField","width","statusField","flexBasis","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","colors","red","common","white","Results","templates","dispatch","useDispatch","useState","selectedTemplates","setSelectedTemplates","page","limit","React","open","setOpen","handleSelectAllTemplates","event","target","checked","map","customer","_id","handleClose","paginatedTemplates","customers","slice","applyPagination","enableBulkOperations","length","selectedSomeTemplates","selectedAllCustomers","useTheme","fullScreen","useMediaQuery","breakpoints","down","Card","Checkbox","indeterminate","onChange","onClick","Box","minWidth","Table","TableHead","TableRow","TableCell","padding","TableBody","template","isTemplateSelected","includes","hover","key","selected","customerId","prevSelected","filter","id","value","display","alignItems","ml","underline","title","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","removeCustomers","defaultProps","dark","minHeight","paddingTop","paddingBottom","ReportListView","reports","useSelector","state","report","useEffect","getReports","Page","Container","maxWidth","mt"],"mappings":"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","file":"static/js/41.5788134d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  PlusCircle as PlusCircleIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon\r\n} from 'react-feather';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  action: {\r\n    marginBottom: theme.spacing(1),\r\n    '& + &': {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ className, ...rest }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      className={clsx(classes.root, className)}\r\n      container\r\n      justify=\"space-between\"\r\n      spacing={3}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app/management\"\r\n            component={RouterLink}\r\n          >\r\n            Templates\r\n          </Link>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          All Report Templates\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          className={classes.action}\r\n          as={Link}\r\n          to=\"/app/reports/create\"\r\n          component={RouterLink}\r\n        >\r\n          <SvgIcon\r\n            fontSize=\"small\"\r\n            className={classes.actionIcon}\r\n          >\r\n            <PlusCircleIcon />\r\n          </SvgIcon>\r\n          New Template\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","/* eslint-disable max-len */\r\nimport React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Checkbox,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  colors,\r\n  useTheme,\r\n  useMediaQuery,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { removeCustomers } from 'src/actions/customerActions';\r\n\r\nfunction applyPagination(customers, page, limit) {\r\n  return customers.slice(page * limit, page * limit + limit);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  queryField: {\r\n    width: 500\r\n  },\r\n  statusField: {\r\n    flexBasis: 200\r\n  },\r\n  bulkOperations: {\r\n    position: 'relative'\r\n  },\r\n  bulkActions: {\r\n    paddingLeft: 4,\r\n    paddingRight: 4,\r\n    marginTop: 6,\r\n    position: 'absolute',\r\n    width: '100%',\r\n    zIndex: 2,\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  bulkAction: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  avatar: {\r\n    backgroundColor: colors.red[500],\r\n    color: colors.common.white\r\n  }\r\n}));\r\n\r\nfunction Results({ className, templates, ...rest }) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [selectedTemplates, setSelectedTemplates] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleSelectAllTemplates = (event) => {\r\n    setSelectedTemplates(event.target.checked\r\n      ? templates.map((customer) => customer._id)\r\n      : []);\r\n  };\r\n\r\n  const handleSelectOneCustomer = (event, customerId) => {\r\n    if (!selectedTemplates.includes(customerId)) {\r\n      setSelectedTemplates((prevSelected) => [...prevSelected, customerId]);\r\n    } else {\r\n      setSelectedTemplates((prevSelected) => prevSelected.filter((id) => id !== customerId));\r\n    }\r\n  };\r\n\r\n  const handleBulkDelete = () => {\r\n    dispatch(removeCustomers(selectedTemplates));\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // Usually query is done on backend with indexing solutions\r\n  const paginatedTemplates = applyPagination(templates, page, limit);\r\n  const enableBulkOperations = selectedTemplates.length > 0;\r\n  const selectedSomeTemplates = selectedTemplates.length > 0 && selectedTemplates.length < templates.length;\r\n  const selectedAllCustomers = selectedTemplates.length === templates.length;\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      {enableBulkOperations && (\r\n        <div className={classes.bulkOperations}>\r\n          <div className={classes.bulkActions}>\r\n            <Checkbox\r\n              checked={selectedAllCustomers}\r\n              indeterminate={selectedSomeTemplates}\r\n              onChange={handleSelectAllTemplates}\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              className={classes.bulkAction}\r\n              onClick={() => { setOpen(true); }}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <PerfectScrollbar>\r\n        <Box minWidth={1200}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={selectedAllCustomers}\r\n                    indeterminate={selectedSomeTemplates}\r\n                    onChange={handleSelectAllTemplates}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  Title\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedTemplates.map((template) => {\r\n                const isTemplateSelected = selectedTemplates.includes(template._id);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    key={template._id}\r\n                    selected={isTemplateSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isTemplateSelected}\r\n                        onChange={(event) => handleSelectOneCustomer(event, template._id)}\r\n                        value={isTemplateSelected}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Box ml={2}>\r\n                          <Link\r\n                            variant=\"subtitle2\"\r\n                            color=\"textPrimary\"\r\n                            component={RouterLink}\r\n                            underline=\"none\"\r\n                            to={`/app/reports/${template._id}/edit`}\r\n                          >\r\n                            {`${template.title}`}\r\n                          </Link>\r\n                        </Box>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\">Remove</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            This will permanently delete selected customers. Are you sure?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleBulkDelete} color=\"primary\">\r\n            Yes\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            No\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Card>\r\n  );\r\n}\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  templates: PropTypes.array\r\n};\r\n\r\nResults.defaultProps = {\r\n  templates: []\r\n};\r\n\r\nexport default Results;\r\n","import React, {\r\n  useEffect,\r\n} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  Box,\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { getReports } from 'src/actions/reportActions';\r\nimport Page from 'src/components/Page';\r\nimport Header from './Header';\r\nimport Results from './Results';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: 100\r\n  }\r\n}));\r\n\r\nfunction ReportListView() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const { reports } = useSelector((state) => state.report);\r\n\r\n  useEffect(() => {\r\n    dispatch(getReports());\r\n  }, []);\r\n\r\n  if (!reports) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Reports List\"\r\n    >\r\n      <Container maxWidth={false}>\r\n        <Header />\r\n        {reports && (\r\n          <Box mt={3}>\r\n            <Results templates={reports} />\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default ReportListView;\r\n"],"sourceRoot":""}