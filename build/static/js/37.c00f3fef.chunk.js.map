{"version":3,"sources":["views/management/JobListView/Header.js","views/management/JobListView/JobList.js","views/management/JobListView/index.js","components/GenericMoreButton.js"],"names":["useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","container","justify","clsx","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","as","SvgIcon","JobList","jobs","useState","selJob","setSelJob","open","setOpen","enqueueSnackbar","useSnackbar","useTheme","dispatch","useDispatch","fullScreen","useMediaQuery","breakpoints","down","removeCard","a","removeJob","handleClose","Card","CardHeader","GenericMoreButton","title","Divider","Box","minWidth","Table","TableHead","TableRow","TableCell","TableBody","map","job","key","_id","description","service","name","customer","address","moment","created_at","format","IconButton","onClick","TablePagination","count","length","onChangePage","onChangeRowsPerPage","page","rowsPerPage","rowsPerPageOptions","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","JobListView","useSelector","state","useEffect","getJobs","Page","Container","maxWidth","mt","menu","width","memo","props","moreRef","useRef","openMenu","setOpenMenu","ref","anchorEl","current","anchorOrigin","vertical","horizontal","PaperProps","transformOrigin","primary"],"mappings":"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","file":"static/js/37.c00f3fef.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  PlusCircle as PlusCircleIcon,\r\n} from 'react-feather';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  action: {\r\n    marginBottom: theme.spacing(1),\r\n    '& + &': {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ className, ...rest }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justify=\"space-between\"\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app/jobs\"\r\n            component={RouterLink}\r\n          >\r\n            Jobs\r\n          </Link>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          All Jobs\r\n        </Typography>\r\n        {/* <Box mt={2}>\r\n          <Button className={classes.action}>\r\n            <SvgIcon\r\n              fontSize=\"small\"\r\n              className={classes.actionIcon}\r\n            >\r\n              <UploadIcon />\r\n            </SvgIcon>\r\n            Import\r\n          </Button>\r\n          <Button className={classes.action}>\r\n            <SvgIcon\r\n              fontSize=\"small\"\r\n              className={classes.actionIcon}\r\n            >\r\n              <DownloadIcon />\r\n            </SvgIcon>\r\n            Export\r\n          </Button>\r\n        </Box> */}\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          className={classes.action}\r\n          as={Link}\r\n          to=\"/app/jobs/create\"\r\n          component={RouterLink}\r\n        >\r\n          <SvgIcon\r\n            fontSize=\"small\"\r\n            className={classes.actionIcon}\r\n          >\r\n            <PlusCircleIcon />\r\n          </SvgIcon>\r\n          New Job\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  Link,\n  IconButton,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  useTheme,\n  useMediaQuery,\n  makeStyles\n} from '@material-ui/core';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Trash as TrashIcon,\n} from 'react-feather';\nimport { useSnackbar } from 'notistack';\nimport { removeJob } from 'src/actions/jobActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction JobList({ className, jobs, ...rest }) {\n  const classes = useStyles();\n  const [selJob, setSelJob] = useState(null);\n  const [open, setOpen] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const removeCard = async () => {\n    try {\n      await dispatch(removeJob(selJob));\n    } catch (error) {\n      enqueueSnackbar('Ooops!', {\n        variant: 'error'\n      });\n    }\n    setOpen(false);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  if (!jobs) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Card>\n        <CardHeader\n          action={<GenericMoreButton />}\n          title=\"Jobs List\"\n        />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={1150}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Service</TableCell>\n                  <TableCell>Customer</TableCell>\n                  <TableCell>Address</TableCell>\n                  <TableCell>Created at</TableCell>\n                  <TableCell>Action</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {jobs.map((job) => (\n                  <TableRow key={job._id}>\n                    <TableCell>\n                      <Link\n                        color=\"inherit\"\n                        component={RouterLink}\n                        to={`/app/jobs/${job._id}`}\n                        variant=\"h6\"\n                      >\n                        {job.title}\n                      </Link>\n                    </TableCell>\n                    <TableCell>{job.description}</TableCell>\n                    <TableCell>{job.service ? job.service.name : ''}</TableCell>\n                    <TableCell>{job.customer ? job.customer.name : ''}</TableCell>\n                    <TableCell>{job.address || ''}</TableCell>\n                    <TableCell>\n                      {moment(job.created_at).format('DD/MM/YYYY')}\n                    </TableCell>\n                    <TableCell>\n                      <IconButton\n                        component={RouterLink}\n                        to={`/app/jobs/${job._id}`}\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      <IconButton\n                        onClick={() => {\n                          setSelJob(job._id);\n                          setOpen(true);\n                        }}\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <TrashIcon />\n                        </SvgIcon>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n        <TablePagination\n          component=\"div\"\n          count={jobs.length}\n          onChangePage={() => {}}\n          onChangeRowsPerPage={() => {}}\n          page={0}\n          rowsPerPage={5}\n          rowsPerPageOptions={[5, 10, 25]}\n        />\n        <Dialog\n          fullScreen={fullScreen}\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n        >\n          <DialogTitle id=\"responsive-dialog-title\">Remove</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              This will permanently delete this job. Are you sure?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus onClick={removeCard} color=\"primary\">\n              Yes\n            </Button>\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\n              No\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Card>\n    </div>\n  );\n}\n\nJobList.propTypes = {\n  className: PropTypes.string,\n  jobs: PropTypes.array\n};\n\nexport default JobList;\n","import React, {\n  useEffect,\n} from 'react';\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport { getJobs } from 'src/actions/jobActions';\nimport Header from './Header';\nimport JobList from './JobList';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction JobListView() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { jobs } = useSelector((state) => state.job);\n\n  useEffect(() => {\n    dispatch(getJobs());\n  }, [dispatch]);\n\n  if (!jobs) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Job List\"\n    >\n      <Container maxWidth={false}>\n        <Header />\n        <Box mt={3}>\n          <JobList jobs={jobs} />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default JobListView;\n","import React, {\r\n  useRef,\r\n  useState,\r\n  memo\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Tooltip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport AchiveIcon from '@material-ui/icons/ArchiveOutlined';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  menu: {\r\n    width: 256,\r\n    maxWidth: '100%'\r\n  }\r\n}));\r\n\r\nfunction GenericMoreButton(props) {\r\n  const classes = useStyles();\r\n  const moreRef = useRef(null);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  const handleMenuOpen = () => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title=\"More options\">\r\n        <IconButton\r\n          {...props}\r\n          onClick={handleMenuOpen}\r\n          ref={moreRef}\r\n        >\r\n          <MoreIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={moreRef.current}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n        PaperProps={{ className: classes.menu }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n      >\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <GetAppIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Import\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <FileCopyIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Copy\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <PictureAsPdfIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Export\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <AchiveIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Achive\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n\r\nGenericMoreButton.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default memo(GenericMoreButton);\r\n"],"sourceRoot":""}