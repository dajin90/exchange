{"version":3,"sources":["views/management/CustomerListView/Header.js","views/management/CustomerListView/Results.js","views/management/CustomerListView/index.js","utils/getInitials.js","components/Label.js"],"names":["useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","as","SvgIcon","queryField","width","statusField","flexBasis","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","colors","red","common","white","Results","customers","dispatch","useDispatch","useState","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","status","filters","React","open","setOpen","handleSelectAllCustomers","event","target","checked","map","customer","_id","handleClose","filteredCustomers","filter","matches","containsQuery","forEach","property","toLowerCase","includes","applyFilters","paginatedCustomers","slice","applyPagination","enableBulkOperations","length","selectedSomeCustomers","selectedAllCustomers","useTheme","fullScreen","useMediaQuery","breakpoints","down","Card","Box","p","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","onChange","persist","value","placeholder","Checkbox","indeterminate","onClick","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isCustomerSelected","hover","key","selected","customerId","prevSelected","id","Avatar","getInitials","first_name","last_name","ml","underline","email","state","city","address","jobs","active_jobs","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","rowsPerPage","rowsPerPageOptions","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","removeCustomers","defaultProps","dark","minHeight","paddingTop","paddingBottom","CustomerListView","useSelector","useEffect","getCustomers","Page","title","Container","maxWidth","mt","name","replace","split","v","toUpperCase","join","fontFamily","typography","borderRadius","flexGrow","whiteSpace","cursor","flexShrink","pxToRem","fontWeight","fontWeightMedium","height","justifyContent","letterSpacing","textTransform","primary","main","fade","secondary","error","success","warning","Label","children","style"],"mappings":"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","file":"static/js/31.59bdb94d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  PlusCircle as PlusCircleIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon\r\n} from 'react-feather';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  action: {\r\n    marginBottom: theme.spacing(1),\r\n    '& + &': {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ className, ...rest }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      className={clsx(classes.root, className)}\r\n      container\r\n      justify=\"space-between\"\r\n      spacing={3}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app/management\"\r\n            component={RouterLink}\r\n          >\r\n            Customers\r\n          </Link>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          All Customers\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          className={classes.action}\r\n          as={Link}\r\n          to=\"/app/customers/create\"\r\n          component={RouterLink}\r\n        >\r\n          <SvgIcon\r\n            fontSize=\"small\"\r\n            className={classes.actionIcon}\r\n          >\r\n            <PlusCircleIcon />\r\n          </SvgIcon>\r\n          New Customer\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  InputAdornment,\n  IconButton,\n  Link,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n  Typography,\n  colors,\n  useTheme,\n  useMediaQuery,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport Label from 'src/components/Label';\nimport getInitials from 'src/utils/getInitials';\nimport { removeCustomers } from 'src/actions/customerActions';\n\nconst statusOptions = [\n  {\n    id: 'all',\n    name: 'All'\n  },\n  {\n    id: 'paid',\n    name: 'Paid'\n  },\n  {\n    id: 'pending',\n    name: 'Pending'\n  },\n  {\n    id: 'canceled',\n    name: 'Canceled'\n  }\n];\n\nconst sortOptions = [\n  {\n    value: 'createdAt|desc',\n    label: 'Newest first'\n  },\n  {\n    value: 'createdAt|asc',\n    label: 'Oldest first'\n  }\n];\n\nfunction getStatusLabel(inventoryType) {\n  const map = {\n    paid: {\n      text: 'Paid',\n      color: 'success'\n    },\n    pending: {\n      text: 'Pending',\n      color: 'warning'\n    },\n    canceled: {\n      text: 'Canceled',\n      color: 'error'\n    }\n  };\n\n  const { text, color } = map[inventoryType];\n\n  return (\n    <Label color={color}>\n      {text}\n    </Label>\n  );\n}\n\nfunction applyFilters(customers, query, filters) {\n  return customers.filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['first_name', 'last_name', 'email'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    if (filters.status && customer.status !== filters.status) {\n      matches = false;\n    }\n\n    return matches;\n  });\n}\n\nfunction applyPagination(customers, page, limit) {\n  return customers.slice(page * limit, page * limit + limit);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  queryField: {\n    width: 500\n  },\n  statusField: {\n    flexBasis: 200\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  avatar: {\n    backgroundColor: colors.red[500],\n    color: colors.common.white\n  }\n}));\n\nfunction Results({ className, customers, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [filters] = useState({\n    status: null\n  });\n  const [open, setOpen] = React.useState(false);\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSelectAllCustomers = (event) => {\n    setSelectedCustomers(event.target.checked\n      ? customers.map((customer) => customer._id)\n      : []);\n  };\n\n  const handleSelectOneCustomer = (event, customerId) => {\n    if (!selectedCustomers.includes(customerId)) {\n      setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\n    } else {\n      setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handleBulkDelete = () => {\n    dispatch(removeCustomers(selectedCustomers));\n    setOpen(false);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // Usually query is done on backend with indexing solutions\n  const filteredCustomers = applyFilters(customers, query, filters);\n  const paginatedCustomers = applyPagination(filteredCustomers, page, limit);\n  const enableBulkOperations = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0 && selectedCustomers.length < customers.length;\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box p={2}>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <TextField\n            className={classes.queryField}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SvgIcon\n                    fontSize=\"small\"\n                    color=\"action\"\n                  >\n                    <SearchIcon />\n                  </SvgIcon>\n                </InputAdornment>\n              )\n            }}\n            onChange={handleQueryChange}\n            placeholder=\"Search customer\"\n            value={query}\n            variant=\"outlined\"\n          />\n        </Box>\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Checkbox\n              checked={selectedAllCustomers}\n              indeterminate={selectedSomeCustomers}\n              onChange={handleSelectAllCustomers}\n            />\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n              onClick={() => { setOpen(true); }}\n            >\n              Delete\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={1200}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllCustomers}\n                    indeterminate={selectedSomeCustomers}\n                    onChange={handleSelectAllCustomers}\n                  />\n                </TableCell>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  State\n                </TableCell>\n                <TableCell>\n                  City\n                </TableCell>\n                <TableCell>\n                  Address\n                </TableCell>\n                <TableCell>\n                  Jobs\n                </TableCell>\n                <TableCell align=\"right\">\n                  Active Job\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(customer._id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer._id}\n                    selected={isCustomerSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        onChange={(event) => handleSelectOneCustomer(event, customer._id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                      >\n                        <Avatar className={classes.avatar}>\n                          {getInitials(`${customer.first_name} ${customer.last_name}`)}\n                        </Avatar>\n                        <Box ml={2}>\n                          <Link\n                            variant=\"subtitle2\"\n                            color=\"textPrimary\"\n                            component={RouterLink}\n                            underline=\"none\"\n                            to={`/app/customers/${customer._id}/edit`}\n                          >\n                            {`${customer.first_name} ${customer.last_name}`}\n                          </Link>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                          >\n                            {customer.email}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {customer.state}\n                    </TableCell>\n                    <TableCell>\n                      {customer.city}\n                    </TableCell>\n                    <TableCell>\n                      {customer.address}\n                    </TableCell>\n                    <TableCell>\n                      {customer.jobs}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {customer.active_jobs}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Remove</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            This will permanently delete selected customers. Are you sure?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleBulkDelete} color=\"primary\">\n            Yes\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            No\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array\n};\n\nResults.defaultProps = {\n  customers: []\n};\n\nexport default Results;\n","import React, {\r\n  useEffect,\r\n} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  Box,\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { getCustomers } from 'src/actions/customerActions';\r\nimport Page from 'src/components/Page';\r\nimport Header from './Header';\r\nimport Results from './Results';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: 100\r\n  }\r\n}));\r\n\r\nfunction CustomerListView() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const { customers } = useSelector((state) => state.customer);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCustomers());\r\n  }, []);\r\n\r\n  if (!customers) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Customer List\"\r\n    >\r\n      <Container maxWidth={false}>\r\n        <Header />\r\n        {customers && (\r\n          <Box mt={3}>\r\n            <Results customers={customers} />\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default CustomerListView;\r\n","export default (name = '') => name\r\n  .replace(/\\s+/, ' ')\r\n  .split(' ')\r\n  .slice(0, 2)\r\n  .map((v) => v && v[0].toUpperCase())\r\n  .join('');\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  fade,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontFamily: theme.typography.fontFamily,\r\n    alignItems: 'center',\r\n    borderRadius: 2,\r\n    display: 'inline-flex',\r\n    flexGrow: 0,\r\n    whiteSpace: 'nowrap',\r\n    cursor: 'default',\r\n    flexShrink: 0,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    height: 20,\r\n    justifyContent: 'center',\r\n    letterSpacing: 0.5,\r\n    minWidth: 20,\r\n    padding: theme.spacing(0.5, 1),\r\n    textTransform: 'uppercase',\r\n  },\r\n  primary: {\r\n    color: theme.palette.primary.main,\r\n    backgroundColor: fade(theme.palette.primary.main, 0.08)\r\n  },\r\n  secondary: {\r\n    color: theme.palette.secondary.main,\r\n    backgroundColor: fade(theme.palette.secondary.main, 0.08)\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    backgroundColor: fade(theme.palette.error.main, 0.08)\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    backgroundColor: fade(theme.palette.success.main, 0.08)\r\n  },\r\n  warning: {\r\n    color: theme.palette.warning.main,\r\n    backgroundColor: fade(theme.palette.warning.main, 0.08)\r\n  }\r\n}));\r\n\r\nfunction Label({\r\n  className,\r\n  color,\r\n  children,\r\n  style,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <span\r\n      className={\r\n        clsx(classes.root, {\r\n          [classes[color]]: color\r\n        }, className)\r\n      }\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </span>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  color: PropTypes.oneOf(['primary', 'secondary', 'error', 'warning', 'success'])\r\n};\r\n\r\nLabel.defaultProps = {\r\n  className: '',\r\n  color: 'secondary'\r\n};\r\n\r\nexport default Label;\r\n"],"sourceRoot":""}