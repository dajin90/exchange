{"version":3,"sources":["components/StackAvatars.js","views/reports/DashboardView/Header.js","views/reports/DashboardView/LatestProjects.js","views/reports/DashboardView/NewProjects.js","views/reports/DashboardView/PerformanceOverTime/Chart.js","views/reports/DashboardView/PerformanceOverTime/index.js","views/reports/DashboardView/RealTime/Chart.js","views/reports/DashboardView/RealTime/index.js","views/reports/DashboardView/RoiPerCustomer.js","views/reports/DashboardView/SystemHealth.js","views/reports/DashboardView/TeamTasks/TaskItem.js","views/reports/DashboardView/TeamTasks/index.js","views/reports/DashboardView/index.js","hooks/useIsMountedRef.js","utils/getInitials.js","components/Label.js","components/GenericMoreButton.js"],"names":["useStyles","makeStyles","theme","root","display","paddingLeft","avatar","border","palette","background","default","marginLeft","zIndex","more","backgroundColor","colors","red","color","common","white","StackAvatars","avatars","limit","className","rest","classes","lastIndex","avatarNodes","slice","map","item","key","title","src","length","push","clsx","variant","defaultProps","memo","timeRanges","value","text","actionIcon","marginRight","spacing","Header","useRef","useState","Grid","container","justify","Breadcrumbs","separator","fontSize","aria-label","Link","to","component","RouterLink","Typography","technology","height","navigateNextIcon","LatestProjects","isMountedRef","useIsMountedRef","activities","setActivities","getProjects","useCallback","axios","get","API_BASE_URL","ACTIVITY","GET_ALL","then","response","current","data","useEffect","Card","CardHeader","action","GenericMoreButton","Divider","Box","minWidth","Table","TableHead","TableRow","TableCell","sortDirection","Tooltip","enterDelay","TableSortLabel","active","direction","align","TableBody","activity","hover","_id","job","alignItems","Avatar","alt","creater","profile_picture","getInitials","first_name","last_name","ml","description","moment","created_at","format","p","justifyContent","Button","size","padding","label","secondary","main","contrastText","width","NewProjects","newJob","setNewJob","getNewJobCount","JOB","NEW_JOB","count","flexGrow","gutterBottom","flexWrap","position","chart","marginTop","RealTime","RoiPerCustomer","customerCount","setCustomerCount","getCustomerCount","WORKER_COUNT","progress","margin","SystemHealth","completeJob","setCompleteJob","getCompleteJobCount","COMPLETE_JOB","LinearProgress","percent","viewButton","TeamTasks","dark","minHeight","paddingTop","paddingBottom","breakpoints","up","paddingRight","DashboardView","Page","Container","maxWidth","lg","sm","xs","xl","isMounted","name","replace","split","v","toUpperCase","join","fontFamily","typography","borderRadius","whiteSpace","cursor","flexShrink","pxToRem","fontWeight","fontWeightMedium","letterSpacing","textTransform","primary","fade","error","success","warning","Label","children","style","menu","props","moreRef","openMenu","setOpenMenu","onClick","ref","anchorEl","anchorOrigin","vertical","horizontal","onClose","open","PaperProps","transformOrigin"],"mappings":"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","file":"static/js/25.8a9ad533.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Avatar,\r\n  Tooltip,\r\n  Typography,\r\n  colors,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    paddingLeft: 20\r\n  },\r\n  avatar: {\r\n    border: `3px solid ${theme.palette.background.default}`,\r\n    marginLeft: -20,\r\n    '&:hover': {\r\n      zIndex: 2\r\n    }\r\n  },\r\n  more: {\r\n    backgroundColor: colors.red[600],\r\n    color: colors.common.white\r\n  }\r\n}));\r\n\r\nfunction StackAvatars({\r\n  avatars,\r\n  limit,\r\n  className,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n  let lastIndex = 0;\r\n\r\n  const avatarNodes = avatars.slice(0, limit).map((item) => (\r\n    <Tooltip\r\n      key={++lastIndex}\r\n      title=\"View\"\r\n    >\r\n      <Avatar\r\n        className={classes.avatar}\r\n        src={item}\r\n      />\r\n    </Tooltip>\r\n  ));\r\n\r\n  if (avatars.length > limit) {\r\n    avatarNodes.push(\r\n      <Avatar\r\n        key={++lastIndex}\r\n        className={clsx(classes.avatar, classes.more)}\r\n      >\r\n        <Typography\r\n          color=\"inherit\"\r\n          variant=\"subtitle2\"\r\n        >\r\n          +\r\n          {avatars.length - limit}\r\n        </Typography>\r\n      </Avatar>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      {avatarNodes}\r\n    </div>\r\n  );\r\n}\r\n\r\nStackAvatars.propTypes = {\r\n  avatars: PropTypes.array,\r\n  className: PropTypes.string,\r\n  limit: PropTypes.number\r\n};\r\n\r\nStackAvatars.defaultProps = {\r\n  avatars: [],\r\n  limit: 3\r\n};\r\n\r\nexport default memo(StackAvatars);\r\n","import React, { useRef, useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  Menu,\r\n  MenuItem,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport { Calendar as CalendarIcon } from 'react-feather';\r\n\r\nconst timeRanges = [\r\n  {\r\n    value: 'today',\r\n    text: 'Today'\r\n  },\r\n  {\r\n    value: 'yesterday',\r\n    text: 'Yesterday'\r\n  },\r\n  {\r\n    value: 'last_30_days',\r\n    text: 'Last 30 days'\r\n  },\r\n  {\r\n    value: 'last_year',\r\n    text: 'Last year'\r\n  }\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const actionRef = useRef(null);\r\n  const [isMenuOpen, setMenuOpen] = useState(false);\r\n  const [timeRange, setTimeRange] = useState(timeRanges[2].text);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justify=\"space-between\"\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Typography\r\n            variant=\"body1\"\r\n            color=\"textPrimary\"\r\n          >\r\n            Reports\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          Here&apos;s what&apos;s happening\r\n        </Typography>\r\n      </Grid>\r\n      {/* <Grid item>\r\n        <Button\r\n          ref={actionRef}\r\n          onClick={() => setMenuOpen(true)}\r\n        >\r\n          <SvgIcon\r\n            fontSize=\"small\"\r\n            className={classes.actionIcon}\r\n          >\r\n            <CalendarIcon />\r\n          </SvgIcon>\r\n          {timeRange}\r\n        </Button>\r\n        <Menu\r\n          anchorEl={actionRef.current}\r\n          onClose={() => setMenuOpen(false)}\r\n          open={isMenuOpen}\r\n          PaperProps={{ className: classes.menu }}\r\n          getContentAnchorEl={null}\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center'\r\n          }}\r\n          transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center'\r\n          }}\r\n        >\r\n          {timeRanges.map((t) => (\r\n            <MenuItem\r\n              key={t.value}\r\n              onClick={() => setTimeRange(t.text)}\r\n            >\r\n              {t.text}\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n      </Grid> */}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useCallback\r\n} from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Tooltip,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport axios from 'src/utils/axios';\r\nimport getInitials from 'src/utils/getInitials';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport GenericMoreButton from 'src/components/GenericMoreButton';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { ACTIVITY } from 'src/config/endpoint';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  technology: {\r\n    height: 30,\r\n    '& + &': {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  },\r\n  navigateNextIcon: {\r\n    marginLeft: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction LatestProjects({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [activities, setActivities] = useState(null);\r\n\r\n  const getProjects = useCallback(() => {\r\n    axios\r\n      .get(`${API_BASE_URL}/${ACTIVITY.GET_ALL}`)\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setActivities(response.data);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getProjects();\r\n  }, [getProjects]);\r\n\r\n  if (!activities) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader\r\n        action={<GenericMoreButton />}\r\n        title=\"Latest Projects\"\r\n      />\r\n      <Divider />\r\n      <PerfectScrollbar>\r\n        <Box minWidth={900}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sortDirection=\"desc\">\r\n                  <Tooltip\r\n                    enterDelay={300}\r\n                    title=\"Sort\"\r\n                  >\r\n                    <TableSortLabel\r\n                      active\r\n                      direction=\"desc\"\r\n                    >\r\n                      Job Name\r\n                    </TableSortLabel>\r\n                  </Tooltip>\r\n                </TableCell>\r\n                <TableCell>\r\n                  Creater\r\n                </TableCell>\r\n                <TableCell>\r\n                  Description\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  Date\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {activities.map((activity) => (\r\n                <TableRow\r\n                  hover\r\n                  key={activity._id}\r\n                >\r\n                  <TableCell>\r\n                    {activity.job ? activity.job.title : ''}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Avatar\r\n                        alt=\"Author\"\r\n                        className={classes.avatar}\r\n                        src={activity.creater.profile_picture}\r\n                      >\r\n                        {getInitials(`${activity.creater.first_name} ${activity.creater.last_name}`)}\r\n                      </Avatar>\r\n                      <Box ml={1}>\r\n                        {`${activity.creater.first_name} ${activity.creater.last_name}`}\r\n                      </Box>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {activity.description}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {moment(activity.created_at).format('DD MMM, YYYY')}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <Box\r\n        p={2}\r\n        display=\"flex\"\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Button\r\n          component={RouterLink}\r\n          size=\"small\"\r\n          to=\"/app/projects\"\r\n        >\r\n          See all\r\n          <NavigateNextIcon className={classes.navigateNextIcon} />\r\n        </Button>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nLatestProjects.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default LatestProjects;\r\n","import React, {\r\n  useEffect,\r\n  useCallback,\r\n  useState\r\n} from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpenOutlined';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { JOB } from 'src/config/endpoint';\r\nimport Label from 'src/components/Label';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(3),\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  label: {\r\n    marginLeft: theme.spacing(1)\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n    color: theme.palette.secondary.contrastText,\r\n    height: 48,\r\n    width: 48\r\n  }\r\n}));\r\n\r\nfunction NewProjects({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [newJob, setNewJob] = useState(0);\r\n\r\n  const getNewJobCount = useCallback(() => {\r\n    axios\r\n      .get(`${API_BASE_URL}/${JOB.NEW_JOB}`)\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setNewJob(response.data.count);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getNewJobCount();\r\n  }, [getNewJobCount]);\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Box flexGrow={1}>\r\n        <Typography\r\n          component=\"h3\"\r\n          gutterBottom\r\n          variant=\"overline\"\r\n          color=\"textSecondary\"\r\n        >\r\n          New jobs\r\n        </Typography>\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          flexWrap=\"wrap\"\r\n        >\r\n          <Typography\r\n            variant=\"h3\"\r\n            color=\"textPrimary\"\r\n          >\r\n            {newJob}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n      <Avatar className={classes.avatar}>\r\n        <FolderOpenIcon />\r\n      </Avatar>\r\n    </Card>\r\n  );\r\n}\r\n\r\nNewProjects.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default NewProjects;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  fade,\r\n  makeStyles,\r\n  useTheme\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    position: 'relative'\r\n  }\r\n}));\r\n\r\nfunction Chart({\r\n  className,\r\n  data: dataProp,\r\n  labels,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const data = (canvas) => {\r\n    const ctx = canvas.getContext('2d');\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, 400);\r\n\r\n    gradient.addColorStop(0, fade(theme.palette.secondary.main, 0.2));\r\n    gradient.addColorStop(0.9, 'rgba(255,255,255,0)');\r\n    gradient.addColorStop(1, 'rgba(255,255,255,0)');\r\n\r\n    return {\r\n      datasets: [\r\n        {\r\n          data: dataProp,\r\n          backgroundColor: gradient,\r\n          borderColor: theme.palette.secondary.main,\r\n          pointBorderColor: theme.palette.background.default,\r\n          pointBorderWidth: 3,\r\n          pointRadius: 6,\r\n          pointBackgroundColor: theme.palette.secondary.main\r\n        }\r\n      ],\r\n      labels\r\n    };\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: false,\r\n    legend: {\r\n      display: false\r\n    },\r\n    layout: {\r\n      padding: 0\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n            drawBorder: false\r\n          },\r\n          ticks: {\r\n            padding: 20,\r\n            fontColor: theme.palette.text.secondary\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            borderDash: [2],\r\n            borderDashOffset: [2],\r\n            color: theme.palette.divider,\r\n            drawBorder: false,\r\n            zeroLineBorderDash: [2],\r\n            zeroLineBorderDashOffset: [2],\r\n            zeroLineColor: theme.palette.divider\r\n          },\r\n          ticks: {\r\n            padding: 20,\r\n            fontColor: theme.palette.text.secondary,\r\n            beginAtZero: true,\r\n            min: 0,\r\n            maxTicksLimit: 7,\r\n            callback: (value) => (value > 0 ? `${value}K` : value)\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    tooltips: {\r\n      enabled: true,\r\n      mode: 'index',\r\n      intersect: false,\r\n      caretSize: 10,\r\n      yPadding: 20,\r\n      xPadding: 20,\r\n      borderWidth: 1,\r\n      borderColor: theme.palette.divider,\r\n      backgroundColor: theme.palette.background.default,\r\n      titleFontColor: theme.palette.text.primary,\r\n      bodyFontColor: theme.palette.text.secondary,\r\n      footerFontColor: theme.palette.text.secondary,\r\n      callbacks: {\r\n        title: () => {},\r\n        label: (tooltipItem) => {\r\n          let label = `Income: ${tooltipItem.yLabel}`;\r\n\r\n          if (tooltipItem.yLabel > 0) {\r\n            label += 'K';\r\n          }\r\n\r\n          return label;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Line\r\n        data={data}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nChart.propTypes = {\r\n  className: PropTypes.string,\r\n  data: PropTypes.array.isRequired,\r\n  labels: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport GenericMoreButton from 'src/components/GenericMoreButton';\r\nimport Chart from './Chart';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {},\r\n  chart: {\r\n    height: '100%'\r\n  }\r\n}));\r\n\r\nfunction PerformanceOverTime({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const performance = {\r\n    thisWeek: {\r\n      data: [],\r\n      labels: []\r\n    },\r\n    thisMonth: {\r\n      data: [],\r\n      labels: []\r\n    },\r\n    thisYear: {\r\n      data: [10, 5, 11, 20, 13, 28, 18, 4, 13, 12, 13, 5],\r\n      labels: [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec'\r\n      ]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader\r\n        action={<GenericMoreButton />}\r\n        title=\"Active Jobs over week\"\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <PerfectScrollbar>\r\n          <Box\r\n            height={375}\r\n            minWidth={500}\r\n          >\r\n            <Chart\r\n              className={classes.chart}\r\n              data={performance.thisYear.data}\r\n              labels={performance.thisYear.labels}\r\n            />\r\n          </Box>\r\n        </PerfectScrollbar>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nPerformanceOverTime.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default PerformanceOverTime;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { makeStyles, useTheme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    position: 'relative'\r\n  }\r\n}));\r\n\r\nfunction Chart({\r\n  data: dataProp,\r\n  labels,\r\n  className,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        backgroundColor: theme.palette.secondary.main,\r\n        data: dataProp,\r\n        barThickness: 12,\r\n        maxBarThickness: 10,\r\n        barPercentage: 0.9,\r\n        categoryPercentage: 1\r\n      }\r\n    ],\r\n    labels\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: false,\r\n    cornerRadius: 20,\r\n    legend: {\r\n      display: false\r\n    },\r\n    layout: {\r\n      padding: 0\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          stacked: false,\r\n          gridLines: {\r\n            display: false,\r\n            drawBorder: false\r\n          },\r\n          ticks: {\r\n            display: false\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          stacked: true,\r\n          gridLines: {\r\n            display: false,\r\n            drawBorder: false\r\n          },\r\n          ticks: {\r\n            beginAtZero: true,\r\n            display: false\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    tooltips: {\r\n      enabled: true,\r\n      mode: 'index',\r\n      intersect: false,\r\n      caretSize: 10,\r\n      yPadding: 20,\r\n      xPadding: 20,\r\n      borderWidth: 1,\r\n      borderColor: theme.palette.divider,\r\n      backgroundColor: theme.palette.background.default,\r\n      titleFontColor: theme.palette.text.primary,\r\n      bodyFontColor: theme.palette.text.secondary,\r\n      footerFontColor: theme.palette.text.secondary,\r\n      callbacks: {\r\n        legend: () => {},\r\n        title: () => {},\r\n        label: (tooltipItem) => {\r\n          const label = `Views: ${tooltipItem.yLabel}`;\r\n\r\n          return label;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Bar\r\n        data={data}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nChart.propTypes = {\r\n  className: PropTypes.string,\r\n  data: PropTypes.array.isRequired,\r\n  labels: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport Chart from './Chart';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  current: {\r\n    marginTop: theme.spacing(0.5),\r\n    marginRight: theme.spacing(0.5)\r\n  },\r\n  navigateNextIcon: {\r\n    marginLeft: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction getRandomInt(min, max) {\r\n  // eslint-disable-next-line no-param-reassign\r\n  min = Math.ceil(min);\r\n  // eslint-disable-next-line no-param-reassign\r\n  max = Math.floor(max);\r\n\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction RealTime({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [data, setData] = useState([\r\n    163,\r\n    166,\r\n    161,\r\n    159,\r\n    99,\r\n    163,\r\n    173,\r\n    166,\r\n    167,\r\n    183,\r\n    176,\r\n    172\r\n  ]);\r\n\r\n  const getData = useCallback(() => {\r\n    if (isMountedRef.current) {\r\n      setData((prevData) => {\r\n        const newData = [...prevData];\r\n\r\n        newData.shift();\r\n        newData.push(0);\r\n\r\n        return newData;\r\n      });\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (isMountedRef.current) {\r\n        setData((prevData) => {\r\n          const newData = [...prevData];\r\n          const random = getRandomInt(100, 200);\r\n\r\n          newData.pop();\r\n          newData.push(random);\r\n\r\n          return newData;\r\n        });\r\n      }\r\n    }, 500);\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => getData(), 2000);\r\n  }, [getData]);\r\n\r\n  const labels = data.map((value, i) => i);\r\n\r\n  const pages = [\r\n    {\r\n      pathname: '/app/projects',\r\n      views: '24'\r\n    },\r\n    {\r\n      pathname: '/app/chat',\r\n      views: '21'\r\n    },\r\n    {\r\n      pathname: '/cart',\r\n      views: '15'\r\n    },\r\n    {\r\n      pathname: '/cart/checkout',\r\n      views: '8'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader\r\n        action={(\r\n          <Typography\r\n            color=\"inherit\"\r\n            variant=\"h3\"\r\n          >\r\n            {\r\n              data[data.length - 1] === 0\r\n                ? data[data.length - 2]\r\n                : data[data.length - 1]\r\n            }\r\n          </Typography>\r\n        )}\r\n        classes={{ action: classes.current }}\r\n        subheaderTypographyProps={{ color: 'textSecondary', variant: 'body2' }}\r\n        title=\"Active workers\"\r\n        titleTypographyProps={{ color: 'textPrimary' }}\r\n      />\r\n      <Chart\r\n        data={data}\r\n        labels={labels}\r\n      />\r\n      <List>\r\n        {pages.map((page) => (\r\n          <ListItem\r\n            classes={{ divider: classes.itemDivider }}\r\n            divider\r\n            key={page.pathname}\r\n          >\r\n            <ListItemText\r\n              primary={page.pathname}\r\n              primaryTypographyProps={{ color: 'textSecondary', variant: 'body2' }}\r\n            />\r\n            <Typography color=\"inherit\">\r\n              {page.views}\r\n            </Typography>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Box\r\n        p={2}\r\n        display=\"flex\"\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Button\r\n          component={RouterLink}\r\n          size=\"small\"\r\n          to=\"#\"\r\n        >\r\n          See all\r\n          <NavigateNextIcon className={classes.navigateNextIcon} />\r\n        </Button>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nRealTime.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default RealTime;\r\n","import React, {\r\n  useEffect,\r\n  useCallback,\r\n  useState\r\n} from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { JOB } from 'src/config/endpoint';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.secondary.contrastText,\r\n    backgroundColor: theme.palette.secondary.main,\r\n    padding: theme.spacing(3),\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.secondary.contrastText,\r\n    color: theme.palette.secondary.main,\r\n    height: 48,\r\n    width: 48\r\n  }\r\n}));\r\n\r\nfunction RoiPerCustomer({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [customerCount, setCustomerCount] = useState(0);\r\n\r\n  const getCustomerCount = useCallback(() => {\r\n    axios\r\n      .get(`${API_BASE_URL}/${JOB.WORKER_COUNT}`)\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setCustomerCount(response.data.count);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getCustomerCount();\r\n  }, [getCustomerCount]);\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Box flexGrow={1}>\r\n        <Typography\r\n          color=\"inherit\"\r\n          component=\"h3\"\r\n          gutterBottom\r\n          variant=\"overline\"\r\n        >\r\n          Active workers\r\n        </Typography>\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          flexWrap=\"wrap\"\r\n        >\r\n          <Typography\r\n            color=\"inherit\"\r\n            variant=\"h3\"\r\n          >\r\n            {customerCount}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n      <Avatar\r\n        className={classes.avatar}\r\n        color=\"inherit\"\r\n      >\r\n        <AttachMoneyIcon />\r\n      </Avatar>\r\n    </Card>\r\n  );\r\n}\r\n\r\nRoiPerCustomer.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default RoiPerCustomer;\r\n","import React, {\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n} from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  Card,\r\n  LinearProgress,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { JOB } from 'src/config/endpoint';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(3)\r\n  },\r\n  progress: {\r\n    margin: theme.spacing(0, 1),\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nfunction SystemHealth({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [completeJob, setCompleteJob] = useState({});\r\n\r\n  const getCompleteJobCount = useCallback(() => {\r\n    axios\r\n      .get(`${API_BASE_URL}/${JOB.COMPLETE_JOB}`)\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setCompleteJob(response.data);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getCompleteJobCount();\r\n  }, [getCompleteJobCount]);\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Typography\r\n        component=\"h3\"\r\n        gutterBottom\r\n        variant=\"overline\"\r\n        color=\"textSecondary\"\r\n      >\r\n        Completed Job\r\n      </Typography>\r\n      <Box\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          {completeJob.count}\r\n        </Typography>\r\n        <LinearProgress\r\n          className={classes.progress}\r\n          value={completeJob.percent}\r\n          color=\"secondary\"\r\n          variant=\"determinate\"\r\n        />\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nSystemHealth.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default SystemHealth;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {\r\n  ListItem,\r\n  ListItemText,\r\n  IconButton,\r\n  Tooltip,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport StackAvatars from 'src/components/StackAvatars';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  viewButton: {\r\n    marginLeft: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nfunction TaskItem({ task, className, ...rest }) {\r\n  const classes = useStyles();\r\n\r\n  let deadline = 'N/A';\r\n  let critical = false;\r\n\r\n  if (task.deadline) {\r\n    const now = moment();\r\n    const deadlineMoment = moment(task.deadline);\r\n\r\n    if (deadlineMoment.isAfter(now) && deadlineMoment.diff(now, 'day') < 3) {\r\n      deadline = `${deadlineMoment.diff(now, 'day')} days remaining`;\r\n      critical = true;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ListItem\r\n      className={clsx(\r\n        classes.root,\r\n        { [classes.critical]: critical },\r\n        className\r\n      )}\r\n      {...rest}\r\n    >\r\n      <ListItemText\r\n        className={classes.listItemText}\r\n        primary={task.title}\r\n        primaryTypographyProps={{ variant: 'h6', noWrap: true }}\r\n        secondary={deadline}\r\n      />\r\n      <StackAvatars\r\n        avatars={task.members}\r\n        limit={3}\r\n      />\r\n      <Tooltip title=\"View task\">\r\n        <IconButton\r\n          className={classes.viewButton}\r\n          edge=\"end\"\r\n        >\r\n          <OpenInNewIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nTaskItem.propTypes = {\r\n  className: PropTypes.string,\r\n  task: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TaskItem;\r\n","import React, {\r\n  useCallback,\r\n  useState,\r\n  useEffect\r\n} from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  List,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport GenericMoreButton from 'src/components/GenericMoreButton';\r\nimport TaskItem from './TaskItem';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nfunction TeamTasks({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [tasks, setTasks] = useState(null);\r\n\r\n  const getTasks = useCallback(() => {\r\n    axios\r\n      .get('/api/reports/tasks')\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setTasks(response.data.tasks);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getTasks();\r\n  }, [getTasks]);\r\n\r\n  if (!tasks) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader\r\n        action={<GenericMoreButton />}\r\n        title=\"Team Tasks\"\r\n      />\r\n      <Divider />\r\n      <PerfectScrollbar>\r\n        <Box minWidth={400}>\r\n          <List>\r\n            {tasks.map((task, i) => (\r\n              <TaskItem\r\n                divider={i < tasks.length - 1}\r\n                key={task.id}\r\n                task={task}\r\n              />\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n    </Card>\r\n  );\r\n}\r\n\r\nTeamTasks.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default TeamTasks;\r\n","import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport Header from './Header';\r\nimport LatestProjects from './LatestProjects';\r\nimport NewProjects from './NewProjects';\r\nimport PerformanceOverTime from './PerformanceOverTime';\r\nimport RealTime from './RealTime';\r\nimport RoiPerCustomer from './RoiPerCustomer';\r\nimport SystemHealth from './SystemHealth';\r\nimport TeamTasks from './TeamTasks';\r\n// import TodaysMoney from './TodaysMoney';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  },\r\n  container: {\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingLeft: 64,\r\n      paddingRight: 64\r\n    }\r\n  }\r\n}));\r\n\r\nfunction DashboardView() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Dashboard\"\r\n    >\r\n      <Container\r\n        maxWidth={false}\r\n        className={classes.container}\r\n      >\r\n        <Header />\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n        >\r\n          {/* <Grid\r\n            item\r\n            lg={3}\r\n            sm={6}\r\n            xs={12}\r\n          >\r\n            <TodaysMoney />\r\n          </Grid> */}\r\n          <Grid\r\n            item\r\n            lg={4}\r\n            sm={6}\r\n            xs={12}\r\n          >\r\n            <NewProjects />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            lg={4}\r\n            sm={6}\r\n            xs={12}\r\n          >\r\n            <SystemHealth />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            lg={4}\r\n            sm={6}\r\n            xs={12}\r\n          >\r\n            <RoiPerCustomer />\r\n          </Grid>\r\n          {/* <Grid\r\n            item\r\n            lg={3}\r\n            xs={12}\r\n          >\r\n            <RealTime />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            lg={9}\r\n            xs={12}\r\n          >\r\n            <PerformanceOverTime />\r\n          </Grid> */}\r\n          {/* <Grid\r\n            item\r\n            lg={5}\r\n            xl={4}\r\n            xs={12}\r\n          >\r\n            <TeamTasks />\r\n          </Grid> */}\r\n          <Grid\r\n            item\r\n            lg={12}\r\n            xl={12}\r\n            xs={12}\r\n          >\r\n            <LatestProjects />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default DashboardView;\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport default function useIsMountedRef() {\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => () => {\r\n    isMounted.current = false;\r\n  }, []);\r\n\r\n  return isMounted;\r\n}\r\n","export default (name = '') => name\r\n  .replace(/\\s+/, ' ')\r\n  .split(' ')\r\n  .slice(0, 2)\r\n  .map((v) => v && v[0].toUpperCase())\r\n  .join('');\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  fade,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontFamily: theme.typography.fontFamily,\r\n    alignItems: 'center',\r\n    borderRadius: 2,\r\n    display: 'inline-flex',\r\n    flexGrow: 0,\r\n    whiteSpace: 'nowrap',\r\n    cursor: 'default',\r\n    flexShrink: 0,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    height: 20,\r\n    justifyContent: 'center',\r\n    letterSpacing: 0.5,\r\n    minWidth: 20,\r\n    padding: theme.spacing(0.5, 1),\r\n    textTransform: 'uppercase',\r\n  },\r\n  primary: {\r\n    color: theme.palette.primary.main,\r\n    backgroundColor: fade(theme.palette.primary.main, 0.08)\r\n  },\r\n  secondary: {\r\n    color: theme.palette.secondary.main,\r\n    backgroundColor: fade(theme.palette.secondary.main, 0.08)\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    backgroundColor: fade(theme.palette.error.main, 0.08)\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    backgroundColor: fade(theme.palette.success.main, 0.08)\r\n  },\r\n  warning: {\r\n    color: theme.palette.warning.main,\r\n    backgroundColor: fade(theme.palette.warning.main, 0.08)\r\n  }\r\n}));\r\n\r\nfunction Label({\r\n  className,\r\n  color,\r\n  children,\r\n  style,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <span\r\n      className={\r\n        clsx(classes.root, {\r\n          [classes[color]]: color\r\n        }, className)\r\n      }\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </span>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  color: PropTypes.oneOf(['primary', 'secondary', 'error', 'warning', 'success'])\r\n};\r\n\r\nLabel.defaultProps = {\r\n  className: '',\r\n  color: 'secondary'\r\n};\r\n\r\nexport default Label;\r\n","import React, {\r\n  useRef,\r\n  useState,\r\n  memo\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Tooltip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport AchiveIcon from '@material-ui/icons/ArchiveOutlined';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  menu: {\r\n    width: 256,\r\n    maxWidth: '100%'\r\n  }\r\n}));\r\n\r\nfunction GenericMoreButton(props) {\r\n  const classes = useStyles();\r\n  const moreRef = useRef(null);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  const handleMenuOpen = () => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title=\"More options\">\r\n        <IconButton\r\n          {...props}\r\n          onClick={handleMenuOpen}\r\n          ref={moreRef}\r\n        >\r\n          <MoreIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={moreRef.current}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n        PaperProps={{ className: classes.menu }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n      >\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <GetAppIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Import\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <FileCopyIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Copy\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <PictureAsPdfIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Export\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <AchiveIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Achive\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n\r\nGenericMoreButton.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default memo(GenericMoreButton);\r\n"],"sourceRoot":""}