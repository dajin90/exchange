{"version":3,"sources":["../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js","views/auth/RegisterView/RegisterForm.js","views/auth/RegisterView/index.js"],"names":["createSvgIcon","React","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","props","ref","_props$checkedIcon","checkedIcon","classes","_props$color","color","_props$icon","icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","inputProps","_props$size","size","other","_objectWithoutProperties","SwitchBase","_extends","type","root","clsx","concat","capitalize","checked","disabled","fontSize","withStyles","theme","palette","text","secondary","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","colorSecondary","name","useStyles","makeStyles","RegisterForm","className","onSubmitSuccess","rest","dispatch","useDispatch","initialValues","first_name","last_name","email","password","policy","validationSchema","Yup","shape","max","required","min","oneOf","onSubmit","values","a","setErrors","setStatus","setSubmitting","register","success","submit","data","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","TextField","error","Boolean","fullWidth","helperText","label","margin","onBlur","onChange","value","variant","Box","alignItems","display","mt","ml","Typography","Link","component","href","FormHelperText","Button","default","justifyContent","background","dark","height","minHeight","flexDirection","paddingBottom","paddingTop","RegisterView","history","useHistory","Page","title","Container","maxWidth","mb","to","Logo","RouterLink","backButton","Card","CardContent","gutterBottom","push","my","Divider"],"mappings":"uKAMeA,cAA4BC,gBAAoB,OAAQ,CACrEC,EAAG,+FACD,wBCFWF,cAA4BC,gBAAoB,OAAQ,CACrEC,EAAG,wIACD,Y,QCFWF,cAA4BC,gBAAoB,OAAQ,CACrEC,EAAG,kGACD,yB,cCwDAC,EAAkCF,gBAAoBG,EAAc,MACpEC,EAA2BJ,gBAAoBK,EAA0B,MACzEC,EAAwCN,gBAAoBO,EAA2B,MACvFC,EAAWR,cAAiB,SAAkBS,EAAOC,GACvD,IAAIC,EAAqBF,EAAMG,YAC3BA,OAAqC,IAAvBD,EAAgCT,EAAqBS,EACnEE,EAAUJ,EAAMI,QAChBC,EAAeL,EAAMM,MACrBA,OAAyB,IAAjBD,EAA0B,YAAcA,EAChDE,EAAcP,EAAMQ,KACpBA,OAAuB,IAAhBD,EAAyBZ,EAAcY,EAC9CE,EAAuBT,EAAMU,cAC7BA,OAAyC,IAAzBD,GAA0CA,EAC1DE,EAAwBX,EAAMY,kBAC9BA,OAA8C,IAA1BD,EAAmCd,EAA2Bc,EAClFE,EAAab,EAAMa,WACnBC,EAAcd,EAAMe,KACpBA,OAAuB,IAAhBD,EAAyB,SAAWA,EAC3CE,EAAQC,YAAyBjB,EAAO,CAAC,cAAe,UAAW,QAAS,OAAQ,gBAAiB,oBAAqB,aAAc,SAE5I,OAAoBT,gBAAoB2B,IAAYC,YAAS,CAC3DC,KAAM,WACNhB,QAAS,CACPiB,KAAMC,YAAKlB,EAAQiB,KAAMjB,EAAQ,QAAQmB,OAAOC,YAAWlB,KAAUI,GAAiBN,EAAQM,eAC9Fe,QAASrB,EAAQqB,QACjBC,SAAUtB,EAAQsB,UAEpBpB,MAAOA,EACPO,WAAYM,YAAS,CACnB,qBAAsBT,GACrBG,GACHL,KAAMjB,eAAmBmB,EAAgBE,EAAoBJ,EAAM,CACjEmB,SAAmB,UAATZ,EAAmB,QAAU,YAEzCZ,YAAaZ,eAAmBmB,EAAgBE,EAAoBT,EAAa,CAC/EwB,SAAmB,UAATZ,EAAmB,QAAU,YAEzCd,IAAKA,GACJe,OA4FUY,iBArLK,SAAgBC,GAClC,MAAO,CAELR,KAAM,CACJf,MAAOuB,EAAMC,QAAQC,KAAKC,WAI5BP,QAAS,GAGTC,SAAU,GAGVhB,cAAe,GAGfuB,aAAc,CACZ,YAAa,CACX3B,MAAOuB,EAAMC,QAAQI,QAAQC,KAC7B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQI,QAAQC,KAAMN,EAAMC,QAAQQ,OAAOC,cAEvE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZ9B,MAAOuB,EAAMC,QAAQQ,OAAOZ,WAKhCc,eAAgB,CACd,YAAa,CACXlC,MAAOuB,EAAMC,QAAQE,UAAUG,KAC/B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQE,UAAUG,KAAMN,EAAMC,QAAQQ,OAAOC,cAEzE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZ9B,MAAOuB,EAAMC,QAAQQ,OAAOZ,cAuIF,CAChCe,KAAM,eADOb,CAEZ7B,I,uRClLG2C,EAAYC,aAAW,iBAAO,CAClCtB,KAAM,OAGR,SAASuB,EAAT,GAAgE,IAAxCC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,gBAAoBC,EAAQ,+CACvD3C,EAAUsC,IACVM,EAAWC,cAEjB,OACE,kBAAC,IAAD,CACEC,cAAe,CACbC,WAAY,GACZC,UAAW,GACXC,MAAO,GACPC,SAAU,GACVC,QAAQ,GAEVC,iBAAkBC,MAAaC,MAAM,CACnCP,WAAYM,MAAaE,IAAI,KAAKC,SAAS,0BAC3CR,UAAWK,MAAaE,IAAI,KAAKC,SAAS,yBAC1CP,MAAOI,MAAaJ,MAAM,yBAAyBM,IAAI,KAAKC,SAAS,qBACrEN,SAAUG,MAAaI,IAAI,GAAGF,IAAI,KAAKC,SAAS,wBAChDL,OAAQE,MAAcK,MAAM,EAAC,GAAO,gCAEtCC,SAAQ,uCAAE,WAAOC,EAAP,sBAAAC,EAAA,6DACRC,EADQ,EACRA,UACAC,EAFQ,EAERA,UACAC,EAHQ,EAGRA,cAHQ,kBAMApB,EAASqB,YAASL,IANlB,OAONlB,IAPM,gDASNqB,EAAU,CAAEG,SAAS,IACrBJ,EAAU,CAAEK,OAAQ,KAAMC,OAC1BJ,GAAc,GAXR,yDAAF,0DAeP,gBACCK,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aACAC,EAND,EAMCA,QACAd,EAPD,EAOCA,OAPD,OASC,wCACEnB,UAAWvB,YAAKlB,EAAQiB,KAAMwB,GAC9BkB,SAAUa,GACN7B,GAEJ,kBAACgC,EAAA,EAAD,CACEC,MAAOC,QAAQH,EAAQ3B,YAAcsB,EAAOtB,YAC5C+B,WAAS,EACTC,WAAYL,EAAQ3B,YAAcsB,EAAOtB,WACzCiC,MAAM,aACNC,OAAO,SACP5C,KAAK,aACL6C,OAAQZ,EACRa,SAAUZ,EACVvD,KAAK,aACLoE,MAAOxB,EAAOb,WACdsC,QAAQ,aAEV,kBAACV,EAAA,EAAD,CACEC,MAAOC,QAAQH,EAAQ1B,WAAaqB,EAAOrB,WAC3C8B,WAAS,EACTC,WAAYL,EAAQ1B,WAAaqB,EAAOrB,UACxCgC,MAAM,YACNC,OAAO,SACP5C,KAAK,YACL6C,OAAQZ,EACRa,SAAUZ,EACVvD,KAAK,YACLoE,MAAOxB,EAAOZ,UACdqC,QAAQ,aAEV,kBAACV,EAAA,EAAD,CACEC,MAAOC,QAAQH,EAAQzB,OAASoB,EAAOpB,OACvC6B,WAAS,EACTC,WAAYL,EAAQzB,OAASoB,EAAOpB,MACpC+B,MAAM,gBACNC,OAAO,SACP5C,KAAK,QACL6C,OAAQZ,EACRa,SAAUZ,EACVvD,KAAK,QACLoE,MAAOxB,EAAOX,MACdoC,QAAQ,aAEV,kBAACV,EAAA,EAAD,CACEC,MAAOC,QAAQH,EAAQxB,UAAYmB,EAAOnB,UAC1C4B,WAAS,EACTC,WAAYL,EAAQxB,UAAYmB,EAAOnB,SACvC8B,MAAM,WACNC,OAAO,SACP5C,KAAK,WACL6C,OAAQZ,EACRa,SAAUZ,EACVvD,KAAK,WACLoE,MAAOxB,EAAOV,SACdmC,QAAQ,aAEV,kBAACC,EAAA,EAAD,CACEC,WAAW,SACXC,QAAQ,OACRC,GAAI,EACJC,IAAK,GAEL,kBAAC/F,EAAA,EAAD,CACE0B,QAASuC,EAAOT,OAChBd,KAAK,SACL8C,SAAUZ,IAEZ,kBAACoB,EAAA,EAAD,CACEN,QAAQ,QACRnF,MAAM,iBAFR,kBAKG,IACD,kBAAC0F,EAAA,EAAD,CACEC,UAAU,IACVC,KAAK,IACL5F,MAAM,aAHR,0BASH2E,QAAQH,EAAQvB,QAAUkB,EAAOlB,SAChC,kBAAC4C,EAAA,EAAD,CAAgBnB,OAAK,GAClBP,EAAOlB,QAGZ,kBAACmC,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACO,EAAA,EAAD,CACE9F,MAAM,YACNoB,SAAUmD,EACVK,WAAS,EACTnE,KAAK,QACLK,KAAK,SACLqE,QAAQ,aANV,uBAsBZ7C,EAAayD,QAAU,CACrBvD,gBAAiB,cAGJF,QCnKTF,EAAYC,aAAW,SAACd,GAAD,MAAY,CACvCR,KAAM,CACJiF,eAAgB,SAChBlE,gBAAiBP,EAAMC,QAAQyE,WAAWC,KAC1CZ,QAAS,OACTa,OAAQ,OACRC,UAAW,OACXC,cAAe,SACfC,cAAe,GACfC,WAAY,QAmEDC,UA/Df,WACE,IAAM1G,EAAUsC,IACVqE,EAAUC,cAMhB,OACE,kBAACC,EAAA,EAAD,CACEpE,UAAWzC,EAAQiB,KACnB6F,MAAM,YAEN,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC1B,EAAA,EAAD,CACE2B,GAAI,EACJzB,QAAQ,OACRD,WAAW,UAEX,kBAAC,IAAD,CAAY2B,GAAG,KACb,kBAACC,EAAA,EAAD,OAEF,kBAACnB,EAAA,EAAD,CACEH,UAAWuB,IACXF,GAAG,IACHzE,UAAWzC,EAAQqH,YAHrB,iBAQF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CACE6B,cAAY,EACZnC,QAAQ,KACRnF,MAAM,eAHR,WAOA,kBAACyF,EAAA,EAAD,CAAYN,QAAQ,aAApB,oCAGA,kBAACC,EAAA,EAAD,CAAKG,GAAI,GACP,kBAAC,EAAD,CAAc/C,gBAvCE,WAC1BiE,EAAQc,KAAK,sBAwCL,kBAACnC,EAAA,EAAD,CAAKoC,GAAI,GACP,kBAACC,EAAA,EAAD,OAEF,kBAAC/B,EAAA,EAAD,CACEC,UAAWuB,IACXF,GAAG,SACH7B,QAAQ,QACRnF,MAAM,iBAJR","file":"static/js/39.1bbfaabb.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  FormHelperText,\r\n  TextField,\r\n  Typography,\r\n  Link,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { register } from 'src/actions/accountActions';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nfunction RegisterForm({ className, onSubmitSuccess, ...rest }) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        first_name: '',\r\n        last_name: '',\r\n        email: '',\r\n        password: '',\r\n        policy: false\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        first_name: Yup.string().max(255).required('First name is required'),\r\n        last_name: Yup.string().max(255).required('Last name is required'),\r\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n        password: Yup.string().min(7).max(255).required('Password is required'),\r\n        policy: Yup.boolean().oneOf([true], 'This field must be checked')\r\n      })}\r\n      onSubmit={async (values, {\r\n        setErrors,\r\n        setStatus,\r\n        setSubmitting\r\n      }) => {\r\n        try {\r\n          await dispatch(register(values));\r\n          onSubmitSuccess();\r\n        } catch (error) {\r\n          setStatus({ success: false });\r\n          setErrors({ submit: error.data });\r\n          setSubmitting(false);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <form\r\n          className={clsx(classes.root, className)}\r\n          onSubmit={handleSubmit}\r\n          {...rest}\r\n        >\r\n          <TextField\r\n            error={Boolean(touched.first_name && errors.first_name)}\r\n            fullWidth\r\n            helperText={touched.first_name && errors.first_name}\r\n            label=\"First Name\"\r\n            margin=\"normal\"\r\n            name=\"first_name\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"first_name\"\r\n            value={values.first_name}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            error={Boolean(touched.last_name && errors.last_name)}\r\n            fullWidth\r\n            helperText={touched.last_name && errors.last_name}\r\n            label=\"Last Name\"\r\n            margin=\"normal\"\r\n            name=\"last_name\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"last_name\"\r\n            value={values.last_name}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            error={Boolean(touched.email && errors.email)}\r\n            fullWidth\r\n            helperText={touched.email && errors.email}\r\n            label=\"Email Address\"\r\n            margin=\"normal\"\r\n            name=\"email\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"email\"\r\n            value={values.email}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            error={Boolean(touched.password && errors.password)}\r\n            fullWidth\r\n            helperText={touched.password && errors.password}\r\n            label=\"Password\"\r\n            margin=\"normal\"\r\n            name=\"password\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.password}\r\n            variant=\"outlined\"\r\n          />\r\n          <Box\r\n            alignItems=\"center\"\r\n            display=\"flex\"\r\n            mt={2}\r\n            ml={-1}\r\n          >\r\n            <Checkbox\r\n              checked={values.policy}\r\n              name=\"policy\"\r\n              onChange={handleChange}\r\n            />\r\n            <Typography\r\n              variant=\"body2\"\r\n              color=\"textSecondary\"\r\n            >\r\n              I have read the\r\n              {' '}\r\n              <Link\r\n                component=\"a\"\r\n                href=\"#\"\r\n                color=\"secondary\"\r\n              >\r\n                Terms and Conditions\r\n              </Link>\r\n            </Typography>\r\n          </Box>\r\n          {Boolean(touched.policy && errors.policy) && (\r\n            <FormHelperText error>\r\n              {errors.policy}\r\n            </FormHelperText>\r\n          )}\r\n          <Box mt={2}>\r\n            <Button\r\n              color=\"secondary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Create account\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nRegisterForm.propTypes = {\r\n  className: PropTypes.string,\r\n  onSubmitSuccess: PropTypes.func\r\n};\r\n\r\nRegisterForm.default = {\r\n  onSubmitSuccess: () => {}\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useHistory } from 'react-router';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  Divider,\r\n  Link,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport Logo from 'src/components/Logo';\r\nimport RegisterForm from './RegisterForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: 'flex',\r\n    height: '100%',\r\n    minHeight: '100%',\r\n    flexDirection: 'column',\r\n    paddingBottom: 80,\r\n    paddingTop: 80\r\n  }\r\n}));\r\n\r\nfunction RegisterView() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const handleSubmitSuccess = () => {\r\n    history.push('/app/dashboard');\r\n  };\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Register\"\r\n    >\r\n      <Container maxWidth=\"sm\">\r\n        <Box\r\n          mb={5}\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n        >\r\n          <RouterLink to=\"/\">\r\n            <Logo />\r\n          </RouterLink>\r\n          <Button\r\n            component={RouterLink}\r\n            to=\"/\"\r\n            className={classes.backButton}\r\n          >\r\n            Back to home\r\n          </Button>\r\n        </Box>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography\r\n              gutterBottom\r\n              variant=\"h2\"\r\n              color=\"textPrimary\"\r\n            >\r\n              Sign up\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              Sign up on the internal platform\r\n            </Typography>\r\n            <Box mt={3}>\r\n              <RegisterForm onSubmitSuccess={handleSubmitSuccess} />\r\n            </Box>\r\n            <Box my={2}>\r\n              <Divider />\r\n            </Box>\r\n            <Link\r\n              component={RouterLink}\r\n              to=\"/login\"\r\n              variant=\"body2\"\r\n              color=\"textSecondary\"\r\n            >\r\n              Have an account?\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default RegisterView;\r\n"],"sourceRoot":""}