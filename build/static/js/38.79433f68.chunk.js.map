{"version":3,"sources":["views/management/WorkerListView/WorkerList.js","views/management/WorkerListView/Header.js","views/management/WorkerListView/index.js","utils/getInitials.js"],"names":["tabs","value","label","useStyles","makeStyles","theme","root","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","marginLeft","spacing","profile_picture","height","marginRight","WorkerList","className","workers","rest","classes","dispatch","useDispatch","useState","currentTab","setCurrentTab","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","filters","setFilters","React","open","setOpen","handleSelectAllCustomers","event","target","checked","map","customer","_id","handleClose","filteredCustomers","customers","filter","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","applyFilters","paginatedCustomers","slice","applyPagination","enableBulkOperations","length","selectedSomeCustomers","selectedAllCustomers","useTheme","fullScreen","useMediaQuery","breakpoints","down","Card","clsx","Tabs","onChange","updatedFilters","scrollButtons","textColor","variant","tab","Tab","Divider","Box","p","minHeight","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","SvgIcon","fontSize","color","persist","placeholder","flexGrow","Checkbox","indeterminate","Button","onClick","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isCustomerSelected","hover","selected","customerId","prevSelected","id","Avatar","src","getInitials","first_name","Link","component","RouterLink","to","last_name","Typography","email","state","city","address","jobs","is_active","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","rowsPerPage","rowsPerPageOptions","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","removeWorkers","defaultProps","action","marginBottom","actionIcon","Header","Grid","container","justify","item","Breadcrumbs","separator","aria-label","as","dark","paddingTop","paddingBottom","WorkerListView","useSelector","worker","useEffect","getWorkers","Page","title","Container","maxWidth","mt","name","replace","split","v","toUpperCase","join"],"mappings":"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","file":"static/js/38.79433f68.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  IconButton,\n  InputAdornment,\n  Link,\n  SvgIcon,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Tabs,\n  TextField,\n  Typography,\n  useMediaQuery,\n  useTheme,\n  makeStyles,\n} from '@material-ui/core';\nimport { removeWorkers } from 'src/actions/workerActions';\nimport CheckIcon from '@material-ui/icons/Check';\nimport WorkOffIcon from '@material-ui/icons/WorkOff';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport getInitials from 'src/utils/getInitials';\n\nconst tabs = [\n  {\n    value: 'all',\n    label: 'All'\n  },\n  {\n    value: 'jobs',\n    label: 'Working'\n  },\n  {\n    value: 'is_active',\n    label: 'Active'\n  },\n];\n\nfunction applyFilters(customers, query, filters) {\n  return customers.filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['email', 'first_name', 'last_name'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && customer[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n}\n\nfunction applyPagination(customers, page, limit) {\n  return customers.slice(page * limit, page * limit + limit);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  queryField: {\n    width: 500\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  profile_picture: {\n    height: 42,\n    width: 42,\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction WorkerList({ className, workers, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [currentTab, setCurrentTab] = useState('all');\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [filters, setFilters] = useState({});\n  const [open, setOpen] = React.useState(false);\n\n  const handleTabsChange = (event, value) => {\n    const updatedFilters = {};\n\n    if (value !== 'all') {\n      updatedFilters[value] = true;\n    }\n\n    setFilters(updatedFilters);\n    setSelectedCustomers([]);\n    setCurrentTab(value);\n  };\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSelectAllCustomers = (event) => {\n    setSelectedCustomers(event.target.checked\n      ? workers.map((customer) => customer._id)\n      : []);\n  };\n\n  const handleSelectOneCustomer = (event, customerId) => {\n    if (!selectedCustomers.includes(customerId)) {\n      setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\n    } else {\n      setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handleBulkDelete = () => {\n    dispatch(removeWorkers(selectedCustomers));\n    setOpen(false);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // Usually query is done on backend with indexing solutions\n  const filteredCustomers = applyFilters(workers, query, filters);\n  const paginatedCustomers = applyPagination(filteredCustomers, page, limit);\n  const enableBulkOperations = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0 && selectedCustomers.length < workers.length;\n  const selectedAllCustomers = selectedCustomers.length === workers.length;\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Tabs\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        textColor=\"secondary\"\n        value={currentTab}\n        variant=\"scrollable\"\n      >\n        {tabs.map((tab) => (\n          <Tab\n            key={tab.value}\n            value={tab.value}\n            label={tab.label}\n          />\n        ))}\n      </Tabs>\n      <Divider />\n      <Box\n        p={2}\n        minHeight={56}\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        <TextField\n          className={classes.queryField}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SvgIcon\n                  fontSize=\"small\"\n                  color=\"action\"\n                >\n                  <SearchIcon />\n                </SvgIcon>\n              </InputAdornment>\n            )\n          }}\n          onChange={handleQueryChange}\n          placeholder=\"Search workers\"\n          value={query}\n          variant=\"outlined\"\n        />\n        <Box flexGrow={1} />\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Checkbox\n              checked={selectedAllCustomers}\n              indeterminate={selectedSomeCustomers}\n              onChange={handleSelectAllCustomers}\n            />\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n              onClick={() => { setOpen(true); }}\n            >\n              Delete\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllCustomers}\n                    indeterminate={selectedSomeCustomers}\n                    onChange={handleSelectAllCustomers}\n                  />\n                </TableCell>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  State\n                </TableCell>\n                <TableCell>\n                  City\n                </TableCell>\n                <TableCell>\n                  Address\n                </TableCell>\n                <TableCell>\n                  Jobs\n                </TableCell>\n                <TableCell>\n                  isActive\n                </TableCell>\n                <TableCell align=\"right\">\n                  Action\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(customer._id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer._id}\n                    selected={isCustomerSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        onChange={(event) => handleSelectOneCustomer(event, customer._id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                      >\n                        <Avatar\n                          className={classes.profile_picture}\n                          src={customer.profile_picture}\n                        >\n                          {getInitials(customer.first_name)}\n                        </Avatar>\n                        <div>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to={`/app/workers/${customer._id}`}\n                            variant=\"h6\"\n                          >\n                            {`${customer.first_name} ${customer.last_name}`}\n                          </Link>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                          >\n                            {customer.email}\n                          </Typography>\n                        </div>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {customer.state}\n                    </TableCell>\n                    <TableCell>\n                      {customer.city}\n                    </TableCell>\n                    <TableCell>\n                      {customer.address}\n                    </TableCell>\n                    <TableCell>\n                      {!customer.jobs && 0}\n                    </TableCell>\n                    <TableCell>\n                      {customer.is_active\n                        ? <CheckIcon fontSize=\"small\" />\n                        : <WorkOffIcon fontSize=\"small\" />}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton\n                        component={RouterLink}\n                        to={`/app/workers/${customer._id}`}\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      {/* <IconButton\n                        component={RouterLink}\n                        to=\"/app/management/customers/1\"\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <ArrowRightIcon />\n                        </SvgIcon>\n                      </IconButton> */}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Remove</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            This will permanently delete selected workers. Are you sure?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleBulkDelete} color=\"primary\">\n            Yes\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            No\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  );\n}\n\nWorkerList.propTypes = {\n  className: PropTypes.string,\n  workers: PropTypes.array\n};\n\nWorkerList.defaultProps = {\n  workers: []\n};\n\nexport default WorkerList;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport {\n  PlusCircle as PlusCircleIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(3),\n  },\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  actionIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/dashboard\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Workers\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          All Workers\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          className={classes.action}\n          as={Link}\n          to=\"/app/workers/create\"\n          component={RouterLink}\n        >\n          <SvgIcon\n            fontSize=\"small\"\n            className={classes.actionIcon}\n          >\n            <PlusCircleIcon />\n          </SvgIcon>\n          New Worker\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, {\r\n  useEffect,\r\n} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Box,\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { getWorkers } from 'src/actions/workerActions';\r\nimport Page from 'src/components/Page';\r\nimport WorkerList from './WorkerList';\r\nimport Header from './Header';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nfunction WorkerListView() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const { workers } = useSelector((state) => state.worker);\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkers());\r\n  }, []);\r\n\r\n  if (!workers) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Worker List\"\r\n    >\r\n      <Header />\r\n      <Container maxWidth={false}>\r\n        {workers && (\r\n          <Box mt={3}>\r\n            <WorkerList workers={workers} />\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default WorkerListView;\r\n","export default (name = '') => name\r\n  .replace(/\\s+/, ' ')\r\n  .split(' ')\r\n  .slice(0, 2)\r\n  .map((v) => v && v[0].toUpperCase())\r\n  .join('');\r\n"],"sourceRoot":""}