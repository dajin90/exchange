{"version":3,"sources":["views/management/WorkerDetailsView/Header.js","views/management/WorkerDetailsView/Details/CustomerInfo.js","views/management/WorkerDetailsView/Details/Emails.js","views/management/WorkerDetailsView/Details/JobListView/Results.js","views/management/WorkerDetailsView/Details/JobListView/index.js","views/management/WorkerDetailsView/Details/Jobs.js","views/management/WorkerDetailsView/Details/OtherActions.js","views/management/WorkerDetailsView/Details/index.js","views/management/WorkerDetailsView/Jobs.js","views/management/WorkerDetailsView/Logs.js","views/management/WorkerDetailsView/index.js","hooks/useIsMountedRef.js","utils/getInitials.js","components/Label.js","components/GenericMoreButton.js"],"names":["useStyles","makeStyles","theme","root","actionIcon","marginRight","spacing","Header","className","worker","rest","classes","Grid","container","justify","clsx","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","first_name","last_name","Button","_id","SvgIcon","fontWeightMedium","fontWeight","typography","CustomerInfo","customer","enqueueSnackbar","useSnackbar","Card","CardHeader","title","Divider","Table","TableBody","TableRow","TableCell","email","Label","verified","phone","state","city","address","Box","p","display","flexDirection","alignItems","onClick","axios","get","API_BASE_URL","WORKER","RESET_PASSWORD","then","action","cell","padding","Emails","queryField","width","statusField","flexBasis","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","marginLeft","avatar","colors","red","common","white","Results","jobs","dispatch","useDispatch","useState","page","setPage","limit","setLimit","open","setOpen","selJob","setSelJob","useTheme","fullScreen","useMediaQuery","breakpoints","down","paginatedJobs","customers","slice","applyPagination","handleClose","TableHead","map","job","hover","key","Avatar","getInitials","ml","underline","service","sprint","moment","created_at","format","TablePagination","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","value","rowsPerPage","rowsPerPageOptions","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","assignJob","defaultProps","minHeight","paddingTop","paddingBottom","JobListView","maxWidth","fullWidth","mt","buttonIcon","Jobs","finishedJob","activeJob","availableJobs","useSelector","useEffect","getAvailableJobs","deleteAction","error","main","dark","OtherActions","customerId","history","useHistory","CardContent","mb","delete","DELETE","push","Details","lg","md","xl","xs","GenericMoreButton","minWidth","description","name","methodCell","statusCell","Logs","isMountedRef","useIsMountedRef","logs","setLogs","getLogs","useCallback","response","current","data","log","method","status","green","route","desc","align","IP","createdAt","WorkerDetailsView","props","setWorker","setJobs","setFinishedJob","setActiveJob","currentTab","setCurrentTab","workerId","match","params","getCustomer","GET","finished_job","active_job","Page","Container","Tabs","onChange","scrollButtons","textColor","tabs","label","tab","Tab","isMounted","useRef","replace","split","v","toUpperCase","join","fontFamily","borderRadius","flexGrow","whiteSpace","cursor","flexShrink","pxToRem","height","justifyContent","letterSpacing","textTransform","primary","fade","secondary","success","warning","children","style","menu","memo","moreRef","openMenu","setOpenMenu","ref","anchorEl","anchorOrigin","vertical","horizontal","PaperProps","transformOrigin"],"mappings":"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","file":"static/js/26.ff38bc5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { Edit as EditIcon } from 'react-feather';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ className, worker, ...rest }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justify=\"space-between\"\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app/workers\"\r\n            component={RouterLink}\r\n          >\r\n            Workers\r\n          </Link>\r\n          <Typography\r\n            variant=\"body1\"\r\n            color=\"textPrimary\"\r\n          >\r\n            Detail\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          {`${worker.first_name} ${worker.last_name}`}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          component={RouterLink}\r\n          to={`/app/workers/${worker._id}/edit`}\r\n        >\r\n          <SvgIcon\r\n            fontSize=\"small\"\r\n            className={classes.actionIcon}\r\n          >\r\n            <EditIcon />\r\n          </SvgIcon>\r\n          Edit\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  worker: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport PersonIcon from '@material-ui/icons/PersonOutline';\r\nimport { useSnackbar } from 'notistack';\r\nimport Label from 'src/components/Label';\r\nimport axios from 'src/utils/axios';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { WORKER } from 'src/config/endpoint';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  fontWeightMedium: {\r\n    fontWeight: theme.typography.fontWeightMedium\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction CustomerInfo({ customer, className, ...rest }) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const resetPassword = () => {\r\n    axios.get(`${API_BASE_URL}/${WORKER.RESET_PASSWORD}/${customer._id}`,)\r\n      .then(() => {\r\n        enqueueSnackbar('Reset password', {\r\n          variant: 'success',\r\n          action: <Button>Success</Button>\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader title=\"Worker info\" />\r\n      <Divider />\r\n      <Table>\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Email\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                {customer.email}\r\n              </Typography>\r\n              <Label color={customer.verified ? 'success' : 'error'}>\r\n                {customer.verified\r\n                  ? 'Email verified'\r\n                  : 'Email not verified'}\r\n              </Label>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Phone\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                {customer.phone}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              State/Region\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                {customer.state}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          {/* <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Country\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                {customer.country}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow> */}\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              City\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                {customer.city}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Address\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                {customer.address}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n      <Box\r\n        p={1}\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"flex-start\"\r\n      >\r\n        <Button\r\n          onClick={()=>{resetPassword()}}\r\n        >\r\n          <LockOpenIcon className={classes.actionIcon} />\r\n          Reset &amp; Send Password\r\n        </Button>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nCustomerInfo.propTypes = {\r\n  className: PropTypes.string,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nexport default CustomerInfo;\r\n","import React, {\r\n  useState,\r\n  useCallback,\r\n  useEffect\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  TextField,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MaiIcon from '@material-ui/icons/MailOutline';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  cell: {\r\n    padding: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst emailOptions = [\r\n  'Resend last invoice',\r\n  'Send password reset',\r\n  'Send verification'\r\n];\r\n\r\nfunction Emails({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [emailOption, setEmailOption] = useState(emailOptions[0]);\r\n  const [emails, setEmails] = useState(null);\r\n\r\n  const getMails = useCallback(() => {\r\n    axios\r\n      .get('/api/management/customers/1/emails')\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setEmails(response.data.emails);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getMails();\r\n  }, [getMails]);\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader title=\"Send emails\" />\r\n      <Divider />\r\n      <CardContent>\r\n        <TextField\r\n          fullWidth\r\n          name=\"option\"\r\n          onChange={(event) => setEmailOption(event.target.value)}\r\n          select\r\n          SelectProps={{ native: true }}\r\n          value={emailOption}\r\n          variant=\"outlined\"\r\n        >\r\n          {emailOptions.map((option) => (\r\n            <option\r\n              key={option}\r\n              value={option}\r\n            >\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </TextField>\r\n        <Box mt={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n          >\r\n            <MaiIcon className={classes.actionIcon} />\r\n            Send email\r\n          </Button>\r\n        </Box>\r\n        {emails && (\r\n          <Box mt={2}>\r\n            <Table>\r\n              <TableBody>\r\n                {emails.map((email) => (\r\n                  <TableRow key={email.id}>\r\n                    <TableCell className={classes.cell}>\r\n                      {moment(email.createdAt).format('DD/MM/YYYY | HH:MM')}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cell}>\r\n                      {email.description}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Box>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nEmails.propTypes = {\r\n  className: PropTypes.string,\r\n  emails: PropTypes.array\r\n};\r\n\r\nexport default Emails;\r\n","/* eslint-disable max-len */\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  colors,\r\n  makeStyles,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport getInitials from 'src/utils/getInitials';\r\nimport { assignJob } from 'src/actions/workerActions';\r\n\r\nfunction applyPagination(customers, page, limit) {\r\n  return customers.slice(page * limit, page * limit + limit);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  queryField: {\r\n    width: 500\r\n  },\r\n  statusField: {\r\n    flexBasis: 200\r\n  },\r\n  bulkOperations: {\r\n    position: 'relative'\r\n  },\r\n  bulkActions: {\r\n    paddingLeft: 4,\r\n    paddingRight: 4,\r\n    marginTop: 6,\r\n    position: 'absolute',\r\n    width: '100%',\r\n    zIndex: 2,\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  bulkAction: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  avatar: {\r\n    backgroundColor: colors.red[500],\r\n    color: colors.common.white\r\n  }\r\n}));\r\n\r\nfunction Results({\r\n  className, jobs, customer, ...rest\r\n}) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [page, setPage] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [open, setOpen] = useState(false);\r\n  const [selJob, setSelJob] = useState(null);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n  };\r\n\r\n  // Usually query is done on backend with indexing solutions\r\n  const paginatedJobs = applyPagination(jobs, page, limit);\r\n\r\n  const handleAssignJob = () => {\r\n    dispatch(assignJob(selJob, customer));\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n        <Box>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  Name\r\n                </TableCell>\r\n                <TableCell>\r\n                  Customer\r\n                </TableCell>\r\n                <TableCell>\r\n                  Service\r\n                </TableCell>\r\n                <TableCell>\r\n                  Sprint\r\n                </TableCell>\r\n                <TableCell>\r\n                  Created at\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedJobs.map((job) => (\r\n                <TableRow\r\n                  hover\r\n                  key={job._id}\r\n                >\r\n                  <TableCell>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Avatar className={classes.avatar}>\r\n                        {getInitials(`${job.title}`)}\r\n                      </Avatar>\r\n                      <Box ml={2}>\r\n                        <Typography\r\n                          variant=\"subtitle2\"\r\n                          color=\"textPrimary\"\r\n                          underline=\"none\"\r\n                          onClick={() => {\r\n                            setSelJob(job._id);\r\n                            setOpen(true);\r\n                          }}\r\n                        >\r\n                          {`${job.title}`}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {job.customer ? `${job.customer.first_name} ${job.customer.last_name}` : ''}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {job.service ? job.service.title : 'No Assigned'}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {job.sprint ? job.sprint.title : 'No Sprint'}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(job.created_at).format('DD MMM YYYY')}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={jobs.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\">Remove</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you going to assign this job to this worker?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleAssignJob} color=\"primary\">\r\n            Yes\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            No\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Card>\r\n  );\r\n}\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  jobs: PropTypes.array,\r\n  customer: PropTypes.string,\r\n};\r\n\r\nResults.defaultProps = {\r\n  jobs: []\r\n};\r\n\r\nexport default Results;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  Dialog,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport Results from './Results';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: 100\r\n  }\r\n}));\r\n\r\nfunction JobListView({\r\n  className,\r\n  open,\r\n  jobs,\r\n  customer,\r\n  onClose,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  if (!jobs) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      className={clsx(classes.root, className)}\r\n      onClose={onClose}\r\n      open={open}\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n    >\r\n      {jobs && (\r\n        <Box mt={3}>\r\n          <Results\r\n            jobs={jobs}\r\n            customer={customer}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nJobListView.propTypes = {\r\n  jobs: PropTypes.array,\r\n  onClose: PropTypes.func,\r\n  open: PropTypes.bool,\r\n  customer: PropTypes.string,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default JobListView;\r\n","import React, {\r\n  useEffect,\r\n  useState\r\n} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  Briefcase as BriefcaseIcon,\r\n} from 'react-feather';\r\nimport {\r\n  getAvailableJobs,\r\n} from 'src/actions/workerActions';\r\nimport JobListView from './JobListView';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  fontWeightMedium: {\r\n    fontWeight: theme.typography.fontWeightMedium\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Jobs({\r\n  customer, finishedJob, activeJob, className, ...rest\r\n}) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [open, setOpen] = useState(false);\r\n  const { availableJobs } = useSelector((state) => state.worker);\r\n  useEffect(() => {\r\n    dispatch(getAvailableJobs(customer));\r\n  }, []);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader title=\"Jobs Info\" />\r\n      <Divider />\r\n      <Table>\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Finished\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                { finishedJob }\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Active\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                { activeJob }\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Last Active Job\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                Test job\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Last Activity\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                Added Room\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell className={classes.fontWeightMedium}>\r\n              Last Active Date\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                0\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n      <Box\r\n        p={1}\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"flex-start\"\r\n      >\r\n        <Button\r\n          onClick={() => { handleOpen(); }}\r\n        >\r\n          <BriefcaseIcon\r\n            className={classes.buttonIcon}\r\n          />\r\n          Assign New Job\r\n        </Button>\r\n      </Box>\r\n      <JobListView\r\n        open={open}\r\n        onClose={handleClose}\r\n        jobs={availableJobs}\r\n        customer={customer}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nJobs.propTypes = {\r\n  className: PropTypes.string,\r\n  finishedJob: PropTypes.number,\r\n  activeJob: PropTypes.number,\r\n  customer: PropTypes.string\r\n};\r\n\r\nexport default Jobs;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { useSnackbar } from 'notistack';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Button,\r\n  Divider,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutline';\r\nimport axios from 'src/utils/axios';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { WORKER } from 'src/config/endpoint';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  deleteAction: {\r\n    color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.error.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.error.dark\r\n    }\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction OtherActions({ className, customerId, ...rest }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const deleteWorker = () => {\r\n    axios.delete(`${API_BASE_URL}/${WORKER.DELETE}/${customerId}`,)\r\n      .then(() => {\r\n        enqueueSnackbar('Worker remove', {\r\n          variant: 'success',\r\n          action: <Button onClick={history.push('/app/workers')}>Customer removed</Button>\r\n        });\r\n      });\r\n  };\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader title=\"Other actions\" />\r\n      <Divider />\r\n      <CardContent>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Button>\r\n            <NotInterestedIcon className={classes.actionIcon} />\r\n            Disable Login\r\n          </Button>\r\n        </Box>\r\n        <Box\r\n          mt={1}\r\n          mb={2}\r\n        >\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"textSecondary\"\r\n          >\r\n            Remove this worker’s data if you don`t need him anymore, if not please\r\n            be aware that what has been deleted can never brough back\r\n          </Typography>\r\n        </Box>\r\n        <Button\r\n          className={classes.deleteAction}\r\n          onClick={() => { deleteWorker(); }}\r\n        >\r\n          <DeleteIcon className={classes.actionIcon} />\r\n          Delete Worker\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nOtherActions.propTypes = {\r\n  customerId: PropTypes.string,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default OtherActions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport CustomerInfo from './CustomerInfo';\r\nimport Emails from './Emails';\r\nimport Jobs from './Jobs';\r\nimport OtherActions from './OtherActions';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nfunction Details({\r\n  customer, finishedJob, activeJob, className, ...rest\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      className={clsx(classes.root, className)}\r\n      container\r\n      spacing={3}\r\n      {...rest}\r\n    >\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={6}\r\n        xl={3}\r\n        xs={12}\r\n      >\r\n        <CustomerInfo customer={customer} />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={6}\r\n        xl={3}\r\n        xs={12}\r\n      >\r\n        <Jobs\r\n          customer={customer._id}\r\n          finishedJob={finishedJob}\r\n          activeJob={activeJob}\r\n        />\r\n      </Grid>\r\n      {/* <Grid\r\n        item\r\n        lg={4}\r\n        md={6}\r\n        xl={3}\r\n        xs={12}\r\n      >\r\n        <Emails />\r\n      </Grid> */}\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={6}\r\n        xl={3}\r\n        xs={12}\r\n      >\r\n        <OtherActions customerId={customer._id} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nDetails.propTypes = {\r\n  className: PropTypes.string,\r\n  finishedJob: PropTypes.number,\r\n  activeJob: PropTypes.number,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Details;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport GenericMoreButton from 'src/components/GenericMoreButton';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nfunction Jobs({ className, jobs, ...rest }) {\r\n  const classes = useStyles();\r\n\r\n  if (!jobs) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Card>\r\n        <CardHeader\r\n          action={<GenericMoreButton />}\r\n          title=\"Jobs List\"\r\n        />\r\n        <Divider />\r\n        <PerfectScrollbar>\r\n          <Box minWidth={1150}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Title</TableCell>\r\n                  <TableCell>Description</TableCell>\r\n                  <TableCell>Service</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Created at</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {jobs.map((job) => (\r\n                  <TableRow key={job._id}>\r\n                    <TableCell>{job.title}</TableCell>\r\n                    <TableCell>{job.description}</TableCell>\r\n                    <TableCell>{job.service ? job.service.name : ''}</TableCell>\r\n                    <TableCell>\r\n                      {job.sprint ? job.sprint.name : ''}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {moment(job.created_at).format('DD/MM/YYYY | HH:MM')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Box>\r\n        </PerfectScrollbar>\r\n        <TablePagination\r\n          component=\"div\"\r\n          count={jobs.length}\r\n          onChangePage={() => {}}\r\n          onChangeRowsPerPage={() => {}}\r\n          page={0}\r\n          rowsPerPage={5}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nJobs.propTypes = {\r\n  className: PropTypes.string,\r\n  jobs: PropTypes.array\r\n};\r\n\r\nexport default Jobs;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useCallback\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  colors,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport Label from 'src/components/Label';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {},\r\n  methodCell: {\r\n    width: 100\r\n  },\r\n  statusCell: {\r\n    width: 64\r\n  }\r\n}));\r\n\r\nfunction Logs({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [logs, setLogs] = useState(null);\r\n\r\n  const getLogs = useCallback(() => {\r\n    axios\r\n      .get('/api/management/customers/1/logs')\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setLogs(response.data.logs);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getLogs();\r\n  }, [getLogs]);\r\n\r\n  if (!logs) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Card>\r\n        <CardHeader title=\"Customer logs\" />\r\n        <Divider />\r\n        <PerfectScrollbar>\r\n          <Box minWidth={1150}>\r\n            <Table>\r\n              <TableBody>\r\n                {logs.map((log) => (\r\n                  <TableRow key={log.id}>\r\n                    <TableCell className={classes.methodCell}>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        color=\"textPrimary\"\r\n                      >\r\n                        {log.method}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell className={classes.statusCell}>\r\n                      <Label\r\n                        color={\r\n                          log.status === 200\r\n                            ? colors.green[600]\r\n                            : colors.red[600]\r\n                        }\r\n                      >\r\n                        {log.status}\r\n                      </Label>\r\n                    </TableCell>\r\n                    <TableCell>{log.route}</TableCell>\r\n                    <TableCell>{log.desc}</TableCell>\r\n                    <TableCell align=\"right\">{log.IP}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {moment(log.createdAt).format('YYYY/MM/DD | hh:mm:ss')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Box>\r\n        </PerfectScrollbar>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nLogs.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Logs;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\nimport React, {\r\n  useCallback,\r\n  useState,\r\n  useEffect\r\n} from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  Tab,\r\n  Tabs,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport axios from 'src/utils/axios';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport { API_BASE_URL } from 'src/config';\r\nimport { WORKER } from 'src/config/endpoint';\r\nimport Header from './Header';\r\nimport Details from './Details';\r\nimport Jobs from './Jobs';\r\nimport Logs from './Logs';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nfunction WorkerDetailsView(props) {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [worker, setWorker] = useState(null);\r\n  const [jobs, setJobs] = useState(null);\r\n  const [finishedJob, setFinishedJob] = useState(0);\r\n  const [activeJob, setActiveJob] = useState(0);\r\n  const [currentTab, setCurrentTab] = useState('details');\r\n  const tabs = [\r\n    { value: 'details', label: 'Details' },\r\n    { value: 'jobs', label: 'Jobs' },\r\n    // { value: 'logs', label: 'Logs' }\r\n  ];\r\n  const { workerId } = props.match.params;\r\n  const handleTabsChange = (event, value) => {\r\n    setCurrentTab(value);\r\n  };\r\n\r\n  const getCustomer = useCallback(() => {\r\n    axios\r\n      .get(`${API_BASE_URL}/${WORKER.GET}/${workerId}`)\r\n      .then((response) => {\r\n        if (isMountedRef.current) {\r\n          setWorker(response.data.worker);\r\n          setJobs(response.data.jobs);\r\n          setFinishedJob(response.data.finished_job);\r\n          setActiveJob(response.data.active_job);\r\n        }\r\n      });\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getCustomer();\r\n  }, [getCustomer]);\r\n\r\n  if (!worker) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Worker Details\"\r\n    >\r\n      <Container maxWidth={false}>\r\n        <Header worker={worker} />\r\n        <Box mt={3}>\r\n          <Tabs\r\n            onChange={handleTabsChange}\r\n            scrollButtons=\"auto\"\r\n            value={currentTab}\r\n            variant=\"scrollable\"\r\n            textColor=\"secondary\"\r\n            className={classes.tabs}\r\n          >\r\n            {tabs.map((tab) => (\r\n              <Tab\r\n                key={tab.value}\r\n                label={tab.label}\r\n                value={tab.value}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n        </Box>\r\n        <Divider />\r\n        <Box mt={3}>\r\n          {currentTab === 'details'\r\n            && (\r\n            <Details\r\n              customer={worker}\r\n              finishedJob={finishedJob}\r\n              activeJob={activeJob}\r\n            />\r\n            )}\r\n          {currentTab === 'jobs' && <Jobs jobs={jobs} />}\r\n          {currentTab === 'logs' && <Logs />}\r\n        </Box>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\n\r\nexport default WorkerDetailsView;\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport default function useIsMountedRef() {\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => () => {\r\n    isMounted.current = false;\r\n  }, []);\r\n\r\n  return isMounted;\r\n}\r\n","export default (name = '') => name\r\n  .replace(/\\s+/, ' ')\r\n  .split(' ')\r\n  .slice(0, 2)\r\n  .map((v) => v && v[0].toUpperCase())\r\n  .join('');\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  fade,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontFamily: theme.typography.fontFamily,\r\n    alignItems: 'center',\r\n    borderRadius: 2,\r\n    display: 'inline-flex',\r\n    flexGrow: 0,\r\n    whiteSpace: 'nowrap',\r\n    cursor: 'default',\r\n    flexShrink: 0,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    height: 20,\r\n    justifyContent: 'center',\r\n    letterSpacing: 0.5,\r\n    minWidth: 20,\r\n    padding: theme.spacing(0.5, 1),\r\n    textTransform: 'uppercase',\r\n  },\r\n  primary: {\r\n    color: theme.palette.primary.main,\r\n    backgroundColor: fade(theme.palette.primary.main, 0.08)\r\n  },\r\n  secondary: {\r\n    color: theme.palette.secondary.main,\r\n    backgroundColor: fade(theme.palette.secondary.main, 0.08)\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    backgroundColor: fade(theme.palette.error.main, 0.08)\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    backgroundColor: fade(theme.palette.success.main, 0.08)\r\n  },\r\n  warning: {\r\n    color: theme.palette.warning.main,\r\n    backgroundColor: fade(theme.palette.warning.main, 0.08)\r\n  }\r\n}));\r\n\r\nfunction Label({\r\n  className,\r\n  color,\r\n  children,\r\n  style,\r\n  ...rest\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <span\r\n      className={\r\n        clsx(classes.root, {\r\n          [classes[color]]: color\r\n        }, className)\r\n      }\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </span>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  color: PropTypes.oneOf(['primary', 'secondary', 'error', 'warning', 'success'])\r\n};\r\n\r\nLabel.defaultProps = {\r\n  className: '',\r\n  color: 'secondary'\r\n};\r\n\r\nexport default Label;\r\n","import React, {\r\n  useRef,\r\n  useState,\r\n  memo\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Tooltip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport AchiveIcon from '@material-ui/icons/ArchiveOutlined';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  menu: {\r\n    width: 256,\r\n    maxWidth: '100%'\r\n  }\r\n}));\r\n\r\nfunction GenericMoreButton(props) {\r\n  const classes = useStyles();\r\n  const moreRef = useRef(null);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  const handleMenuOpen = () => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title=\"More options\">\r\n        <IconButton\r\n          {...props}\r\n          onClick={handleMenuOpen}\r\n          ref={moreRef}\r\n        >\r\n          <MoreIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={moreRef.current}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n        PaperProps={{ className: classes.menu }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left'\r\n        }}\r\n      >\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <GetAppIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Import\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <FileCopyIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Copy\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <PictureAsPdfIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Export\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <AchiveIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Achive\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n\r\nGenericMoreButton.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default memo(GenericMoreButton);\r\n"],"sourceRoot":""}